// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
    provider = "prisma-client-js"
}

datasource db {
    provider = "postgresql"
    url      = env("DATABASE_URL")
}

enum employeeRole {
    SURGEON
    NURSE
    OTHER
}

enum RoomTypes {
    STANDARD
    DELUX
    PREMIUM
}

model Employee {
    id                 Int          @id @default(autoincrement())
    ssn                String       @unique
    name               String
    address            String?
    phone              String?
    gender             String
    salary             Float?
    role               employeeRole @default(OTHER)
    primaryPhysicianId Int?         @unique
    primaryPhysician   Physician?   @relation(fields: [primaryPhysicianId], references: [id], onDelete: Cascade)
    nurseId            Int?         @unique
    nurse              Nurse?       @relation(fields: [nurseId], references: [id], onDelete: Cascade)
}

model Physician {
    id              Int           @id @default(autoincrement())
    specialty       String
    grade           String?
    employee        Employee?
    availability    Boolean?      @default(true)
    Surgery         Surgery[]
    appointments    Appointment[]
    maxAppointments Int?
}

model Nurse {
    id           Int       @id @default(autoincrement())
    years        Int
    grade        String?
    availability Boolean?  @default(true)
    employee     Employee?
    Surgery      Surgery[]
}

model Patient {
    id           Int           @id @default(autoincrement())
    name         String
    gender       String
    dob          DateTime
    address      String?
    ssn          String        @unique
    bloodType    String?
    allergies    Allergy?
    medicalData  MedicalData?
    surgeries    Surgery[]
    appointments Appointment[]
}

model MedicalData {
    id        Int      @id @default(autoincrement())
    patientId Int      @unique
    type      String
    date      DateTime
    notes     String?
    patient   Patient  @relation(fields: [patientId], references: [id], onDelete: Cascade)
}

model Allergy {
    id        Int     @id @default(autoincrement())
    patientId Int     @unique
    name      String
    severity  String
    reactions String?
    frequency String?
    patient   Patient @relation(fields: [patientId], references: [id], onDelete: Cascade)
}

model Appointment {
    id         Int       @id @default(autoincrement())
    date       DateTime
    patientId  Int
    patient    Patient   @relation(fields: [patientId], references: [id], onDelete: Cascade)
    physcianId Int
    physcian   Physician @relation(fields: [physcianId], references: [id], onDelete: Cascade)
}

model Surgery {
    id           Int       @id @default(autoincrement())
    name         String
    type         String
    location     String
    specialNeeds String?
    surgeonId    Int
    nurseId      Int?
    patientId    Int
    date         DateTime
    duration     Int
    surgeon      Physician @relation(fields: [surgeonId], references: [id], onDelete: Cascade)
    nurse        Nurse?    @relation(fields: [nurseId], references: [id], onDelete: Cascade)
    patient      Patient   @relation(fields: [patientId], references: [id], onDelete: Cascade)
    Room         Rooms?
}

model Rooms {
    id              Int      @id @default(autoincrement())
    occupiedDate    DateTime
    roomNumber      Int
    Capacity        Int
    occupancyStatus Boolean  @default(false)
    floor           Int
    surgeryId       Int?      @unique
    surgery         Surgery?  @relation(fields: [surgeryId], references: [id], onDelete: Cascade)
    rent            Int?
}
